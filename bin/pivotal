#! /usr/bin/env racket
#lang racket

(require json
         net/url
         racket/list
         racket/port)

;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;         url handling
;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(define PIVOTAL-URI
  "https://www.pivotaltracker.com/services/v5/projects")

(define ITERATION-PATH
  "/iterations?scope=current")

(define MEMBERSHIPS-PATH
  "/memberships")

(define (pivotal-url project-id)
  (define url-string
    (string-append PIVOTAL-URI "/" project-id ITERATION-PATH))
  (println url-string)
  (string->url  url-string))

(define (members-url project-id)
  (define url-string
    (string-append PIVOTAL-URI "/" project-id MEMBERSHIPS-PATH))
  (string->url  url-string))

(define (pivotal-header token)
  (list (string-append "X-TrackerToken:" token)))

(define (fetch url header)
  (define in (get-pure-port url header))
  (define out (open-output-string))
  (copy-port in out)
  (get-output-string out))

(define (api-call url header)
  (fetch url header))

(define (api-call->file url header filename)
  (call-with-output-file filename
    (lambda (out)
      (write (api-call url header) out))
    #:mode 'text
    #:exists 'replace))

;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;         json
;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(struct story
  (name owned-by-id kind current-state owner-name) #:transparent)

(define (iteration-stories iteration)
  (hash-ref (car (string->jsexpr iteration)) 'stories))

(define (story-node->story story-node users)
    (story
     (hash-ref story-node 'name)
     (hash-ref story-node 'owned_by_id)
     (hash-ref story-node 'kind)
     (hash-ref story-node 'current_state)
     (hash-ref users (hash-ref story-node 'owned_by_id))))

(define (extract-stories iteration memberships)
  (let ([users (extract-users (string->jsexpr  memberships))])
    (map (lambda [s]
           (story-node->story s users))
         (iteration-stories iteration))))

(define (extract-users nodes)
  (let ([m (make-hash)])
    (for ([n nodes])
      (let* ([person (hash-ref n 'person)]
             [id (hash-ref person 'id)]
             [name (hash-ref person 'name)])
        (hash-set! m id name)))
    m))

(define (grouped stories)
  (group-by (lambda (s)
              (story-owner-name s))
            stories))

;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;         command-line
;;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(define (runner args)
  (let* ([token (vector-ref args 0)]
         [project-id (vector-ref args 1)]
         [file-path (vector-ref args 2)])

    (printf "~a ~a\n" token project-id)

    (api-call->file
     (pivotal-url project-id)
     (pivotal-header token)
     file-path)))

(define (usage)
  (printf "Arguments needed: <token> <project-id> <destination-file>\n"))

(define (main)
  (define cli-args (current-command-line-arguments))
  (if (> 3 (vector-length cli-args))
      (usage)
      (runner cli-args)))

(main)
